// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moto_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_moto_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_moto_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_moto_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_moto_5fproto_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_moto_5fproto_2eproto;
class ControllerInput;
struct ControllerInputDefaultTypeInternal;
extern ControllerInputDefaultTypeInternal _ControllerInput_default_instance_;
class Thrusters;
struct ThrustersDefaultTypeInternal;
extern ThrustersDefaultTypeInternal _Thrusters_default_instance_;
class Thrusters_Pos;
struct Thrusters_PosDefaultTypeInternal;
extern Thrusters_PosDefaultTypeInternal _Thrusters_Pos_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ControllerInput* Arena::CreateMaybeMessage<::ControllerInput>(Arena*);
template<> ::Thrusters* Arena::CreateMaybeMessage<::Thrusters>(Arena*);
template<> ::Thrusters_Pos* Arena::CreateMaybeMessage<::Thrusters_Pos>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ControllerInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControllerInput) */ {
 public:
  inline ControllerInput() : ControllerInput(nullptr) {}
  ~ControllerInput() override;
  explicit PROTOBUF_CONSTEXPR ControllerInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerInput(const ControllerInput& from);
  ControllerInput(ControllerInput&& from) noexcept
    : ControllerInput() {
    *this = ::std::move(from);
  }

  inline ControllerInput& operator=(const ControllerInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerInput& operator=(ControllerInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerInput* internal_default_instance() {
    return reinterpret_cast<const ControllerInput*>(
               &_ControllerInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControllerInput& a, ControllerInput& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerInput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerInput& from) {
    ControllerInput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerInput* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControllerInput";
  }
  protected:
  explicit ControllerInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftJoystickYFieldNumber = 1,
    kLeftJoysitckXFieldNumber = 2,
    kRightJoystickYFieldNumber = 3,
    kRightJoystickXFieldNumber = 4,
    kLeftTriggerFieldNumber = 5,
    kLeftBumperFieldNumber = 6,
    kRightBumperFieldNumber = 7,
    kAFieldNumber = 8,
    kXFieldNumber = 9,
    kYFieldNumber = 10,
    kBFieldNumber = 11,
    kLeftThumbFieldNumber = 12,
    kRightThumbFieldNumber = 13,
    kBackFieldNumber = 14,
    kStartFieldNumber = 15,
    kLeftDPadFieldNumber = 16,
    kRightDPadFieldNumber = 17,
    kUpDPadFieldNumber = 18,
    kDownDPadFieldNumber = 19,
  };
  // float LeftJoystickY = 1;
  void clear_leftjoysticky();
  float leftjoysticky() const;
  void set_leftjoysticky(float value);
  private:
  float _internal_leftjoysticky() const;
  void _internal_set_leftjoysticky(float value);
  public:

  // float LeftJoysitckX = 2;
  void clear_leftjoysitckx();
  float leftjoysitckx() const;
  void set_leftjoysitckx(float value);
  private:
  float _internal_leftjoysitckx() const;
  void _internal_set_leftjoysitckx(float value);
  public:

  // float RightJoystickY = 3;
  void clear_rightjoysticky();
  float rightjoysticky() const;
  void set_rightjoysticky(float value);
  private:
  float _internal_rightjoysticky() const;
  void _internal_set_rightjoysticky(float value);
  public:

  // float RightJoystickX = 4;
  void clear_rightjoystickx();
  float rightjoystickx() const;
  void set_rightjoystickx(float value);
  private:
  float _internal_rightjoystickx() const;
  void _internal_set_rightjoystickx(float value);
  public:

  // float LeftTrigger = 5;
  void clear_lefttrigger();
  float lefttrigger() const;
  void set_lefttrigger(float value);
  private:
  float _internal_lefttrigger() const;
  void _internal_set_lefttrigger(float value);
  public:

  // float LeftBumper = 6;
  void clear_leftbumper();
  float leftbumper() const;
  void set_leftbumper(float value);
  private:
  float _internal_leftbumper() const;
  void _internal_set_leftbumper(float value);
  public:

  // float RightBumper = 7;
  void clear_rightbumper();
  float rightbumper() const;
  void set_rightbumper(float value);
  private:
  float _internal_rightbumper() const;
  void _internal_set_rightbumper(float value);
  public:

  // float A = 8;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // float X = 9;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 10;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float B = 11;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float LeftThumb = 12;
  void clear_leftthumb();
  float leftthumb() const;
  void set_leftthumb(float value);
  private:
  float _internal_leftthumb() const;
  void _internal_set_leftthumb(float value);
  public:

  // float RightThumb = 13;
  void clear_rightthumb();
  float rightthumb() const;
  void set_rightthumb(float value);
  private:
  float _internal_rightthumb() const;
  void _internal_set_rightthumb(float value);
  public:

  // float Back = 14;
  void clear_back();
  float back() const;
  void set_back(float value);
  private:
  float _internal_back() const;
  void _internal_set_back(float value);
  public:

  // float Start = 15;
  void clear_start();
  float start() const;
  void set_start(float value);
  private:
  float _internal_start() const;
  void _internal_set_start(float value);
  public:

  // float LeftDPad = 16;
  void clear_leftdpad();
  float leftdpad() const;
  void set_leftdpad(float value);
  private:
  float _internal_leftdpad() const;
  void _internal_set_leftdpad(float value);
  public:

  // float RightDPad = 17;
  void clear_rightdpad();
  float rightdpad() const;
  void set_rightdpad(float value);
  private:
  float _internal_rightdpad() const;
  void _internal_set_rightdpad(float value);
  public:

  // float UpDPad = 18;
  void clear_updpad();
  float updpad() const;
  void set_updpad(float value);
  private:
  float _internal_updpad() const;
  void _internal_set_updpad(float value);
  public:

  // float DownDPad = 19;
  void clear_downdpad();
  float downdpad() const;
  void set_downdpad(float value);
  private:
  float _internal_downdpad() const;
  void _internal_set_downdpad(float value);
  public:

  // @@protoc_insertion_point(class_scope:ControllerInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float leftjoysticky_;
    float leftjoysitckx_;
    float rightjoysticky_;
    float rightjoystickx_;
    float lefttrigger_;
    float leftbumper_;
    float rightbumper_;
    float a_;
    float x_;
    float y_;
    float b_;
    float leftthumb_;
    float rightthumb_;
    float back_;
    float start_;
    float leftdpad_;
    float rightdpad_;
    float updpad_;
    float downdpad_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_moto_5fproto_2eproto;
};
// -------------------------------------------------------------------

class Thrusters_Pos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Thrusters.Pos) */ {
 public:
  inline Thrusters_Pos() : Thrusters_Pos(nullptr) {}
  ~Thrusters_Pos() override;
  explicit PROTOBUF_CONSTEXPR Thrusters_Pos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Thrusters_Pos(const Thrusters_Pos& from);
  Thrusters_Pos(Thrusters_Pos&& from) noexcept
    : Thrusters_Pos() {
    *this = ::std::move(from);
  }

  inline Thrusters_Pos& operator=(const Thrusters_Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Thrusters_Pos& operator=(Thrusters_Pos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Thrusters_Pos& default_instance() {
    return *internal_default_instance();
  }
  static inline const Thrusters_Pos* internal_default_instance() {
    return reinterpret_cast<const Thrusters_Pos*>(
               &_Thrusters_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Thrusters_Pos& a, Thrusters_Pos& b) {
    a.Swap(&b);
  }
  inline void Swap(Thrusters_Pos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Thrusters_Pos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Thrusters_Pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Thrusters_Pos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Thrusters_Pos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Thrusters_Pos& from) {
    Thrusters_Pos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Thrusters_Pos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Thrusters.Pos";
  }
  protected:
  explicit Thrusters_Pos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormXFieldNumber = 1,
    kNormYFieldNumber = 2,
    kNormZFieldNumber = 3,
    kDistXFieldNumber = 4,
    kDistYFieldNumber = 5,
    kDistZFieldNumber = 6,
  };
  // float normX = 1;
  void clear_normx();
  float normx() const;
  void set_normx(float value);
  private:
  float _internal_normx() const;
  void _internal_set_normx(float value);
  public:

  // float normY = 2;
  void clear_normy();
  float normy() const;
  void set_normy(float value);
  private:
  float _internal_normy() const;
  void _internal_set_normy(float value);
  public:

  // float normZ = 3;
  void clear_normz();
  float normz() const;
  void set_normz(float value);
  private:
  float _internal_normz() const;
  void _internal_set_normz(float value);
  public:

  // float distX = 4;
  void clear_distx();
  float distx() const;
  void set_distx(float value);
  private:
  float _internal_distx() const;
  void _internal_set_distx(float value);
  public:

  // float distY = 5;
  void clear_disty();
  float disty() const;
  void set_disty(float value);
  private:
  float _internal_disty() const;
  void _internal_set_disty(float value);
  public:

  // float distZ = 6;
  void clear_distz();
  float distz() const;
  void set_distz(float value);
  private:
  float _internal_distz() const;
  void _internal_set_distz(float value);
  public:

  // @@protoc_insertion_point(class_scope:Thrusters.Pos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float normx_;
    float normy_;
    float normz_;
    float distx_;
    float disty_;
    float distz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_moto_5fproto_2eproto;
};
// -------------------------------------------------------------------

class Thrusters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Thrusters) */ {
 public:
  inline Thrusters() : Thrusters(nullptr) {}
  ~Thrusters() override;
  explicit PROTOBUF_CONSTEXPR Thrusters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Thrusters(const Thrusters& from);
  Thrusters(Thrusters&& from) noexcept
    : Thrusters() {
    *this = ::std::move(from);
  }

  inline Thrusters& operator=(const Thrusters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Thrusters& operator=(Thrusters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Thrusters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Thrusters* internal_default_instance() {
    return reinterpret_cast<const Thrusters*>(
               &_Thrusters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Thrusters& a, Thrusters& b) {
    a.Swap(&b);
  }
  inline void Swap(Thrusters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Thrusters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Thrusters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Thrusters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Thrusters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Thrusters& from) {
    Thrusters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Thrusters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Thrusters";
  }
  protected:
  explicit Thrusters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Thrusters_Pos Pos;

  // accessors -------------------------------------------------------

  enum : int {
    kT1FieldNumber = 1,
    kT2FieldNumber = 2,
    kT3FieldNumber = 3,
    kT4FieldNumber = 4,
    kT5FieldNumber = 5,
    kT6FieldNumber = 6,
    kT7FieldNumber = 7,
    kT8FieldNumber = 8,
    kMaxPowT1FieldNumber = 9,
    kMaxPowT2FieldNumber = 10,
    kMaxPowT3FieldNumber = 11,
    kMaxPowT4FieldNumber = 12,
    kMaxPowT5FieldNumber = 13,
    kMaxPowT6FieldNumber = 14,
    kMaxPowT7FieldNumber = 15,
    kMaxPowT8FieldNumber = 16,
  };
  // .Thrusters.Pos T1 = 1;
  bool has_t1() const;
  private:
  bool _internal_has_t1() const;
  public:
  void clear_t1();
  const ::Thrusters_Pos& t1() const;
  PROTOBUF_NODISCARD ::Thrusters_Pos* release_t1();
  ::Thrusters_Pos* mutable_t1();
  void set_allocated_t1(::Thrusters_Pos* t1);
  private:
  const ::Thrusters_Pos& _internal_t1() const;
  ::Thrusters_Pos* _internal_mutable_t1();
  public:
  void unsafe_arena_set_allocated_t1(
      ::Thrusters_Pos* t1);
  ::Thrusters_Pos* unsafe_arena_release_t1();

  // .Thrusters.Pos T2 = 2;
  bool has_t2() const;
  private:
  bool _internal_has_t2() const;
  public:
  void clear_t2();
  const ::Thrusters_Pos& t2() const;
  PROTOBUF_NODISCARD ::Thrusters_Pos* release_t2();
  ::Thrusters_Pos* mutable_t2();
  void set_allocated_t2(::Thrusters_Pos* t2);
  private:
  const ::Thrusters_Pos& _internal_t2() const;
  ::Thrusters_Pos* _internal_mutable_t2();
  public:
  void unsafe_arena_set_allocated_t2(
      ::Thrusters_Pos* t2);
  ::Thrusters_Pos* unsafe_arena_release_t2();

  // .Thrusters.Pos T3 = 3;
  bool has_t3() const;
  private:
  bool _internal_has_t3() const;
  public:
  void clear_t3();
  const ::Thrusters_Pos& t3() const;
  PROTOBUF_NODISCARD ::Thrusters_Pos* release_t3();
  ::Thrusters_Pos* mutable_t3();
  void set_allocated_t3(::Thrusters_Pos* t3);
  private:
  const ::Thrusters_Pos& _internal_t3() const;
  ::Thrusters_Pos* _internal_mutable_t3();
  public:
  void unsafe_arena_set_allocated_t3(
      ::Thrusters_Pos* t3);
  ::Thrusters_Pos* unsafe_arena_release_t3();

  // .Thrusters.Pos T4 = 4;
  bool has_t4() const;
  private:
  bool _internal_has_t4() const;
  public:
  void clear_t4();
  const ::Thrusters_Pos& t4() const;
  PROTOBUF_NODISCARD ::Thrusters_Pos* release_t4();
  ::Thrusters_Pos* mutable_t4();
  void set_allocated_t4(::Thrusters_Pos* t4);
  private:
  const ::Thrusters_Pos& _internal_t4() const;
  ::Thrusters_Pos* _internal_mutable_t4();
  public:
  void unsafe_arena_set_allocated_t4(
      ::Thrusters_Pos* t4);
  ::Thrusters_Pos* unsafe_arena_release_t4();

  // .Thrusters.Pos T5 = 5;
  bool has_t5() const;
  private:
  bool _internal_has_t5() const;
  public:
  void clear_t5();
  const ::Thrusters_Pos& t5() const;
  PROTOBUF_NODISCARD ::Thrusters_Pos* release_t5();
  ::Thrusters_Pos* mutable_t5();
  void set_allocated_t5(::Thrusters_Pos* t5);
  private:
  const ::Thrusters_Pos& _internal_t5() const;
  ::Thrusters_Pos* _internal_mutable_t5();
  public:
  void unsafe_arena_set_allocated_t5(
      ::Thrusters_Pos* t5);
  ::Thrusters_Pos* unsafe_arena_release_t5();

  // .Thrusters.Pos T6 = 6;
  bool has_t6() const;
  private:
  bool _internal_has_t6() const;
  public:
  void clear_t6();
  const ::Thrusters_Pos& t6() const;
  PROTOBUF_NODISCARD ::Thrusters_Pos* release_t6();
  ::Thrusters_Pos* mutable_t6();
  void set_allocated_t6(::Thrusters_Pos* t6);
  private:
  const ::Thrusters_Pos& _internal_t6() const;
  ::Thrusters_Pos* _internal_mutable_t6();
  public:
  void unsafe_arena_set_allocated_t6(
      ::Thrusters_Pos* t6);
  ::Thrusters_Pos* unsafe_arena_release_t6();

  // .Thrusters.Pos T7 = 7;
  bool has_t7() const;
  private:
  bool _internal_has_t7() const;
  public:
  void clear_t7();
  const ::Thrusters_Pos& t7() const;
  PROTOBUF_NODISCARD ::Thrusters_Pos* release_t7();
  ::Thrusters_Pos* mutable_t7();
  void set_allocated_t7(::Thrusters_Pos* t7);
  private:
  const ::Thrusters_Pos& _internal_t7() const;
  ::Thrusters_Pos* _internal_mutable_t7();
  public:
  void unsafe_arena_set_allocated_t7(
      ::Thrusters_Pos* t7);
  ::Thrusters_Pos* unsafe_arena_release_t7();

  // .Thrusters.Pos T8 = 8;
  bool has_t8() const;
  private:
  bool _internal_has_t8() const;
  public:
  void clear_t8();
  const ::Thrusters_Pos& t8() const;
  PROTOBUF_NODISCARD ::Thrusters_Pos* release_t8();
  ::Thrusters_Pos* mutable_t8();
  void set_allocated_t8(::Thrusters_Pos* t8);
  private:
  const ::Thrusters_Pos& _internal_t8() const;
  ::Thrusters_Pos* _internal_mutable_t8();
  public:
  void unsafe_arena_set_allocated_t8(
      ::Thrusters_Pos* t8);
  ::Thrusters_Pos* unsafe_arena_release_t8();

  // float MaxPowT1 = 9;
  void clear_maxpowt1();
  float maxpowt1() const;
  void set_maxpowt1(float value);
  private:
  float _internal_maxpowt1() const;
  void _internal_set_maxpowt1(float value);
  public:

  // float MaxPowT2 = 10;
  void clear_maxpowt2();
  float maxpowt2() const;
  void set_maxpowt2(float value);
  private:
  float _internal_maxpowt2() const;
  void _internal_set_maxpowt2(float value);
  public:

  // float MaxPowT3 = 11;
  void clear_maxpowt3();
  float maxpowt3() const;
  void set_maxpowt3(float value);
  private:
  float _internal_maxpowt3() const;
  void _internal_set_maxpowt3(float value);
  public:

  // float MaxPowT4 = 12;
  void clear_maxpowt4();
  float maxpowt4() const;
  void set_maxpowt4(float value);
  private:
  float _internal_maxpowt4() const;
  void _internal_set_maxpowt4(float value);
  public:

  // float MaxPowT5 = 13;
  void clear_maxpowt5();
  float maxpowt5() const;
  void set_maxpowt5(float value);
  private:
  float _internal_maxpowt5() const;
  void _internal_set_maxpowt5(float value);
  public:

  // float MaxPowT6 = 14;
  void clear_maxpowt6();
  float maxpowt6() const;
  void set_maxpowt6(float value);
  private:
  float _internal_maxpowt6() const;
  void _internal_set_maxpowt6(float value);
  public:

  // float MaxPowT7 = 15;
  void clear_maxpowt7();
  float maxpowt7() const;
  void set_maxpowt7(float value);
  private:
  float _internal_maxpowt7() const;
  void _internal_set_maxpowt7(float value);
  public:

  // float MaxPowT8 = 16;
  void clear_maxpowt8();
  float maxpowt8() const;
  void set_maxpowt8(float value);
  private:
  float _internal_maxpowt8() const;
  void _internal_set_maxpowt8(float value);
  public:

  // @@protoc_insertion_point(class_scope:Thrusters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Thrusters_Pos* t1_;
    ::Thrusters_Pos* t2_;
    ::Thrusters_Pos* t3_;
    ::Thrusters_Pos* t4_;
    ::Thrusters_Pos* t5_;
    ::Thrusters_Pos* t6_;
    ::Thrusters_Pos* t7_;
    ::Thrusters_Pos* t8_;
    float maxpowt1_;
    float maxpowt2_;
    float maxpowt3_;
    float maxpowt4_;
    float maxpowt5_;
    float maxpowt6_;
    float maxpowt7_;
    float maxpowt8_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_moto_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControllerInput

// float LeftJoystickY = 1;
inline void ControllerInput::clear_leftjoysticky() {
  _impl_.leftjoysticky_ = 0;
}
inline float ControllerInput::_internal_leftjoysticky() const {
  return _impl_.leftjoysticky_;
}
inline float ControllerInput::leftjoysticky() const {
  // @@protoc_insertion_point(field_get:ControllerInput.LeftJoystickY)
  return _internal_leftjoysticky();
}
inline void ControllerInput::_internal_set_leftjoysticky(float value) {
  
  _impl_.leftjoysticky_ = value;
}
inline void ControllerInput::set_leftjoysticky(float value) {
  _internal_set_leftjoysticky(value);
  // @@protoc_insertion_point(field_set:ControllerInput.LeftJoystickY)
}

// float LeftJoysitckX = 2;
inline void ControllerInput::clear_leftjoysitckx() {
  _impl_.leftjoysitckx_ = 0;
}
inline float ControllerInput::_internal_leftjoysitckx() const {
  return _impl_.leftjoysitckx_;
}
inline float ControllerInput::leftjoysitckx() const {
  // @@protoc_insertion_point(field_get:ControllerInput.LeftJoysitckX)
  return _internal_leftjoysitckx();
}
inline void ControllerInput::_internal_set_leftjoysitckx(float value) {
  
  _impl_.leftjoysitckx_ = value;
}
inline void ControllerInput::set_leftjoysitckx(float value) {
  _internal_set_leftjoysitckx(value);
  // @@protoc_insertion_point(field_set:ControllerInput.LeftJoysitckX)
}

// float RightJoystickY = 3;
inline void ControllerInput::clear_rightjoysticky() {
  _impl_.rightjoysticky_ = 0;
}
inline float ControllerInput::_internal_rightjoysticky() const {
  return _impl_.rightjoysticky_;
}
inline float ControllerInput::rightjoysticky() const {
  // @@protoc_insertion_point(field_get:ControllerInput.RightJoystickY)
  return _internal_rightjoysticky();
}
inline void ControllerInput::_internal_set_rightjoysticky(float value) {
  
  _impl_.rightjoysticky_ = value;
}
inline void ControllerInput::set_rightjoysticky(float value) {
  _internal_set_rightjoysticky(value);
  // @@protoc_insertion_point(field_set:ControllerInput.RightJoystickY)
}

// float RightJoystickX = 4;
inline void ControllerInput::clear_rightjoystickx() {
  _impl_.rightjoystickx_ = 0;
}
inline float ControllerInput::_internal_rightjoystickx() const {
  return _impl_.rightjoystickx_;
}
inline float ControllerInput::rightjoystickx() const {
  // @@protoc_insertion_point(field_get:ControllerInput.RightJoystickX)
  return _internal_rightjoystickx();
}
inline void ControllerInput::_internal_set_rightjoystickx(float value) {
  
  _impl_.rightjoystickx_ = value;
}
inline void ControllerInput::set_rightjoystickx(float value) {
  _internal_set_rightjoystickx(value);
  // @@protoc_insertion_point(field_set:ControllerInput.RightJoystickX)
}

// float LeftTrigger = 5;
inline void ControllerInput::clear_lefttrigger() {
  _impl_.lefttrigger_ = 0;
}
inline float ControllerInput::_internal_lefttrigger() const {
  return _impl_.lefttrigger_;
}
inline float ControllerInput::lefttrigger() const {
  // @@protoc_insertion_point(field_get:ControllerInput.LeftTrigger)
  return _internal_lefttrigger();
}
inline void ControllerInput::_internal_set_lefttrigger(float value) {
  
  _impl_.lefttrigger_ = value;
}
inline void ControllerInput::set_lefttrigger(float value) {
  _internal_set_lefttrigger(value);
  // @@protoc_insertion_point(field_set:ControllerInput.LeftTrigger)
}

// float LeftBumper = 6;
inline void ControllerInput::clear_leftbumper() {
  _impl_.leftbumper_ = 0;
}
inline float ControllerInput::_internal_leftbumper() const {
  return _impl_.leftbumper_;
}
inline float ControllerInput::leftbumper() const {
  // @@protoc_insertion_point(field_get:ControllerInput.LeftBumper)
  return _internal_leftbumper();
}
inline void ControllerInput::_internal_set_leftbumper(float value) {
  
  _impl_.leftbumper_ = value;
}
inline void ControllerInput::set_leftbumper(float value) {
  _internal_set_leftbumper(value);
  // @@protoc_insertion_point(field_set:ControllerInput.LeftBumper)
}

// float RightBumper = 7;
inline void ControllerInput::clear_rightbumper() {
  _impl_.rightbumper_ = 0;
}
inline float ControllerInput::_internal_rightbumper() const {
  return _impl_.rightbumper_;
}
inline float ControllerInput::rightbumper() const {
  // @@protoc_insertion_point(field_get:ControllerInput.RightBumper)
  return _internal_rightbumper();
}
inline void ControllerInput::_internal_set_rightbumper(float value) {
  
  _impl_.rightbumper_ = value;
}
inline void ControllerInput::set_rightbumper(float value) {
  _internal_set_rightbumper(value);
  // @@protoc_insertion_point(field_set:ControllerInput.RightBumper)
}

// float A = 8;
inline void ControllerInput::clear_a() {
  _impl_.a_ = 0;
}
inline float ControllerInput::_internal_a() const {
  return _impl_.a_;
}
inline float ControllerInput::a() const {
  // @@protoc_insertion_point(field_get:ControllerInput.A)
  return _internal_a();
}
inline void ControllerInput::_internal_set_a(float value) {
  
  _impl_.a_ = value;
}
inline void ControllerInput::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:ControllerInput.A)
}

// float X = 9;
inline void ControllerInput::clear_x() {
  _impl_.x_ = 0;
}
inline float ControllerInput::_internal_x() const {
  return _impl_.x_;
}
inline float ControllerInput::x() const {
  // @@protoc_insertion_point(field_get:ControllerInput.X)
  return _internal_x();
}
inline void ControllerInput::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void ControllerInput::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ControllerInput.X)
}

// float Y = 10;
inline void ControllerInput::clear_y() {
  _impl_.y_ = 0;
}
inline float ControllerInput::_internal_y() const {
  return _impl_.y_;
}
inline float ControllerInput::y() const {
  // @@protoc_insertion_point(field_get:ControllerInput.Y)
  return _internal_y();
}
inline void ControllerInput::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void ControllerInput::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ControllerInput.Y)
}

// float B = 11;
inline void ControllerInput::clear_b() {
  _impl_.b_ = 0;
}
inline float ControllerInput::_internal_b() const {
  return _impl_.b_;
}
inline float ControllerInput::b() const {
  // @@protoc_insertion_point(field_get:ControllerInput.B)
  return _internal_b();
}
inline void ControllerInput::_internal_set_b(float value) {
  
  _impl_.b_ = value;
}
inline void ControllerInput::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:ControllerInput.B)
}

// float LeftThumb = 12;
inline void ControllerInput::clear_leftthumb() {
  _impl_.leftthumb_ = 0;
}
inline float ControllerInput::_internal_leftthumb() const {
  return _impl_.leftthumb_;
}
inline float ControllerInput::leftthumb() const {
  // @@protoc_insertion_point(field_get:ControllerInput.LeftThumb)
  return _internal_leftthumb();
}
inline void ControllerInput::_internal_set_leftthumb(float value) {
  
  _impl_.leftthumb_ = value;
}
inline void ControllerInput::set_leftthumb(float value) {
  _internal_set_leftthumb(value);
  // @@protoc_insertion_point(field_set:ControllerInput.LeftThumb)
}

// float RightThumb = 13;
inline void ControllerInput::clear_rightthumb() {
  _impl_.rightthumb_ = 0;
}
inline float ControllerInput::_internal_rightthumb() const {
  return _impl_.rightthumb_;
}
inline float ControllerInput::rightthumb() const {
  // @@protoc_insertion_point(field_get:ControllerInput.RightThumb)
  return _internal_rightthumb();
}
inline void ControllerInput::_internal_set_rightthumb(float value) {
  
  _impl_.rightthumb_ = value;
}
inline void ControllerInput::set_rightthumb(float value) {
  _internal_set_rightthumb(value);
  // @@protoc_insertion_point(field_set:ControllerInput.RightThumb)
}

// float Back = 14;
inline void ControllerInput::clear_back() {
  _impl_.back_ = 0;
}
inline float ControllerInput::_internal_back() const {
  return _impl_.back_;
}
inline float ControllerInput::back() const {
  // @@protoc_insertion_point(field_get:ControllerInput.Back)
  return _internal_back();
}
inline void ControllerInput::_internal_set_back(float value) {
  
  _impl_.back_ = value;
}
inline void ControllerInput::set_back(float value) {
  _internal_set_back(value);
  // @@protoc_insertion_point(field_set:ControllerInput.Back)
}

// float Start = 15;
inline void ControllerInput::clear_start() {
  _impl_.start_ = 0;
}
inline float ControllerInput::_internal_start() const {
  return _impl_.start_;
}
inline float ControllerInput::start() const {
  // @@protoc_insertion_point(field_get:ControllerInput.Start)
  return _internal_start();
}
inline void ControllerInput::_internal_set_start(float value) {
  
  _impl_.start_ = value;
}
inline void ControllerInput::set_start(float value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:ControllerInput.Start)
}

// float LeftDPad = 16;
inline void ControllerInput::clear_leftdpad() {
  _impl_.leftdpad_ = 0;
}
inline float ControllerInput::_internal_leftdpad() const {
  return _impl_.leftdpad_;
}
inline float ControllerInput::leftdpad() const {
  // @@protoc_insertion_point(field_get:ControllerInput.LeftDPad)
  return _internal_leftdpad();
}
inline void ControllerInput::_internal_set_leftdpad(float value) {
  
  _impl_.leftdpad_ = value;
}
inline void ControllerInput::set_leftdpad(float value) {
  _internal_set_leftdpad(value);
  // @@protoc_insertion_point(field_set:ControllerInput.LeftDPad)
}

// float RightDPad = 17;
inline void ControllerInput::clear_rightdpad() {
  _impl_.rightdpad_ = 0;
}
inline float ControllerInput::_internal_rightdpad() const {
  return _impl_.rightdpad_;
}
inline float ControllerInput::rightdpad() const {
  // @@protoc_insertion_point(field_get:ControllerInput.RightDPad)
  return _internal_rightdpad();
}
inline void ControllerInput::_internal_set_rightdpad(float value) {
  
  _impl_.rightdpad_ = value;
}
inline void ControllerInput::set_rightdpad(float value) {
  _internal_set_rightdpad(value);
  // @@protoc_insertion_point(field_set:ControllerInput.RightDPad)
}

// float UpDPad = 18;
inline void ControllerInput::clear_updpad() {
  _impl_.updpad_ = 0;
}
inline float ControllerInput::_internal_updpad() const {
  return _impl_.updpad_;
}
inline float ControllerInput::updpad() const {
  // @@protoc_insertion_point(field_get:ControllerInput.UpDPad)
  return _internal_updpad();
}
inline void ControllerInput::_internal_set_updpad(float value) {
  
  _impl_.updpad_ = value;
}
inline void ControllerInput::set_updpad(float value) {
  _internal_set_updpad(value);
  // @@protoc_insertion_point(field_set:ControllerInput.UpDPad)
}

// float DownDPad = 19;
inline void ControllerInput::clear_downdpad() {
  _impl_.downdpad_ = 0;
}
inline float ControllerInput::_internal_downdpad() const {
  return _impl_.downdpad_;
}
inline float ControllerInput::downdpad() const {
  // @@protoc_insertion_point(field_get:ControllerInput.DownDPad)
  return _internal_downdpad();
}
inline void ControllerInput::_internal_set_downdpad(float value) {
  
  _impl_.downdpad_ = value;
}
inline void ControllerInput::set_downdpad(float value) {
  _internal_set_downdpad(value);
  // @@protoc_insertion_point(field_set:ControllerInput.DownDPad)
}

// -------------------------------------------------------------------

// Thrusters_Pos

// float normX = 1;
inline void Thrusters_Pos::clear_normx() {
  _impl_.normx_ = 0;
}
inline float Thrusters_Pos::_internal_normx() const {
  return _impl_.normx_;
}
inline float Thrusters_Pos::normx() const {
  // @@protoc_insertion_point(field_get:Thrusters.Pos.normX)
  return _internal_normx();
}
inline void Thrusters_Pos::_internal_set_normx(float value) {
  
  _impl_.normx_ = value;
}
inline void Thrusters_Pos::set_normx(float value) {
  _internal_set_normx(value);
  // @@protoc_insertion_point(field_set:Thrusters.Pos.normX)
}

// float normY = 2;
inline void Thrusters_Pos::clear_normy() {
  _impl_.normy_ = 0;
}
inline float Thrusters_Pos::_internal_normy() const {
  return _impl_.normy_;
}
inline float Thrusters_Pos::normy() const {
  // @@protoc_insertion_point(field_get:Thrusters.Pos.normY)
  return _internal_normy();
}
inline void Thrusters_Pos::_internal_set_normy(float value) {
  
  _impl_.normy_ = value;
}
inline void Thrusters_Pos::set_normy(float value) {
  _internal_set_normy(value);
  // @@protoc_insertion_point(field_set:Thrusters.Pos.normY)
}

// float normZ = 3;
inline void Thrusters_Pos::clear_normz() {
  _impl_.normz_ = 0;
}
inline float Thrusters_Pos::_internal_normz() const {
  return _impl_.normz_;
}
inline float Thrusters_Pos::normz() const {
  // @@protoc_insertion_point(field_get:Thrusters.Pos.normZ)
  return _internal_normz();
}
inline void Thrusters_Pos::_internal_set_normz(float value) {
  
  _impl_.normz_ = value;
}
inline void Thrusters_Pos::set_normz(float value) {
  _internal_set_normz(value);
  // @@protoc_insertion_point(field_set:Thrusters.Pos.normZ)
}

// float distX = 4;
inline void Thrusters_Pos::clear_distx() {
  _impl_.distx_ = 0;
}
inline float Thrusters_Pos::_internal_distx() const {
  return _impl_.distx_;
}
inline float Thrusters_Pos::distx() const {
  // @@protoc_insertion_point(field_get:Thrusters.Pos.distX)
  return _internal_distx();
}
inline void Thrusters_Pos::_internal_set_distx(float value) {
  
  _impl_.distx_ = value;
}
inline void Thrusters_Pos::set_distx(float value) {
  _internal_set_distx(value);
  // @@protoc_insertion_point(field_set:Thrusters.Pos.distX)
}

// float distY = 5;
inline void Thrusters_Pos::clear_disty() {
  _impl_.disty_ = 0;
}
inline float Thrusters_Pos::_internal_disty() const {
  return _impl_.disty_;
}
inline float Thrusters_Pos::disty() const {
  // @@protoc_insertion_point(field_get:Thrusters.Pos.distY)
  return _internal_disty();
}
inline void Thrusters_Pos::_internal_set_disty(float value) {
  
  _impl_.disty_ = value;
}
inline void Thrusters_Pos::set_disty(float value) {
  _internal_set_disty(value);
  // @@protoc_insertion_point(field_set:Thrusters.Pos.distY)
}

// float distZ = 6;
inline void Thrusters_Pos::clear_distz() {
  _impl_.distz_ = 0;
}
inline float Thrusters_Pos::_internal_distz() const {
  return _impl_.distz_;
}
inline float Thrusters_Pos::distz() const {
  // @@protoc_insertion_point(field_get:Thrusters.Pos.distZ)
  return _internal_distz();
}
inline void Thrusters_Pos::_internal_set_distz(float value) {
  
  _impl_.distz_ = value;
}
inline void Thrusters_Pos::set_distz(float value) {
  _internal_set_distz(value);
  // @@protoc_insertion_point(field_set:Thrusters.Pos.distZ)
}

// -------------------------------------------------------------------

// Thrusters

// .Thrusters.Pos T1 = 1;
inline bool Thrusters::_internal_has_t1() const {
  return this != internal_default_instance() && _impl_.t1_ != nullptr;
}
inline bool Thrusters::has_t1() const {
  return _internal_has_t1();
}
inline void Thrusters::clear_t1() {
  if (GetArenaForAllocation() == nullptr && _impl_.t1_ != nullptr) {
    delete _impl_.t1_;
  }
  _impl_.t1_ = nullptr;
}
inline const ::Thrusters_Pos& Thrusters::_internal_t1() const {
  const ::Thrusters_Pos* p = _impl_.t1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Thrusters_Pos&>(
      ::_Thrusters_Pos_default_instance_);
}
inline const ::Thrusters_Pos& Thrusters::t1() const {
  // @@protoc_insertion_point(field_get:Thrusters.T1)
  return _internal_t1();
}
inline void Thrusters::unsafe_arena_set_allocated_t1(
    ::Thrusters_Pos* t1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t1_);
  }
  _impl_.t1_ = t1;
  if (t1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Thrusters.T1)
}
inline ::Thrusters_Pos* Thrusters::release_t1() {
  
  ::Thrusters_Pos* temp = _impl_.t1_;
  _impl_.t1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Thrusters_Pos* Thrusters::unsafe_arena_release_t1() {
  // @@protoc_insertion_point(field_release:Thrusters.T1)
  
  ::Thrusters_Pos* temp = _impl_.t1_;
  _impl_.t1_ = nullptr;
  return temp;
}
inline ::Thrusters_Pos* Thrusters::_internal_mutable_t1() {
  
  if (_impl_.t1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Thrusters_Pos>(GetArenaForAllocation());
    _impl_.t1_ = p;
  }
  return _impl_.t1_;
}
inline ::Thrusters_Pos* Thrusters::mutable_t1() {
  ::Thrusters_Pos* _msg = _internal_mutable_t1();
  // @@protoc_insertion_point(field_mutable:Thrusters.T1)
  return _msg;
}
inline void Thrusters::set_allocated_t1(::Thrusters_Pos* t1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t1_;
  }
  if (t1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t1);
    if (message_arena != submessage_arena) {
      t1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t1, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t1_ = t1;
  // @@protoc_insertion_point(field_set_allocated:Thrusters.T1)
}

// .Thrusters.Pos T2 = 2;
inline bool Thrusters::_internal_has_t2() const {
  return this != internal_default_instance() && _impl_.t2_ != nullptr;
}
inline bool Thrusters::has_t2() const {
  return _internal_has_t2();
}
inline void Thrusters::clear_t2() {
  if (GetArenaForAllocation() == nullptr && _impl_.t2_ != nullptr) {
    delete _impl_.t2_;
  }
  _impl_.t2_ = nullptr;
}
inline const ::Thrusters_Pos& Thrusters::_internal_t2() const {
  const ::Thrusters_Pos* p = _impl_.t2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Thrusters_Pos&>(
      ::_Thrusters_Pos_default_instance_);
}
inline const ::Thrusters_Pos& Thrusters::t2() const {
  // @@protoc_insertion_point(field_get:Thrusters.T2)
  return _internal_t2();
}
inline void Thrusters::unsafe_arena_set_allocated_t2(
    ::Thrusters_Pos* t2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t2_);
  }
  _impl_.t2_ = t2;
  if (t2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Thrusters.T2)
}
inline ::Thrusters_Pos* Thrusters::release_t2() {
  
  ::Thrusters_Pos* temp = _impl_.t2_;
  _impl_.t2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Thrusters_Pos* Thrusters::unsafe_arena_release_t2() {
  // @@protoc_insertion_point(field_release:Thrusters.T2)
  
  ::Thrusters_Pos* temp = _impl_.t2_;
  _impl_.t2_ = nullptr;
  return temp;
}
inline ::Thrusters_Pos* Thrusters::_internal_mutable_t2() {
  
  if (_impl_.t2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Thrusters_Pos>(GetArenaForAllocation());
    _impl_.t2_ = p;
  }
  return _impl_.t2_;
}
inline ::Thrusters_Pos* Thrusters::mutable_t2() {
  ::Thrusters_Pos* _msg = _internal_mutable_t2();
  // @@protoc_insertion_point(field_mutable:Thrusters.T2)
  return _msg;
}
inline void Thrusters::set_allocated_t2(::Thrusters_Pos* t2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t2_;
  }
  if (t2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t2);
    if (message_arena != submessage_arena) {
      t2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t2_ = t2;
  // @@protoc_insertion_point(field_set_allocated:Thrusters.T2)
}

// .Thrusters.Pos T3 = 3;
inline bool Thrusters::_internal_has_t3() const {
  return this != internal_default_instance() && _impl_.t3_ != nullptr;
}
inline bool Thrusters::has_t3() const {
  return _internal_has_t3();
}
inline void Thrusters::clear_t3() {
  if (GetArenaForAllocation() == nullptr && _impl_.t3_ != nullptr) {
    delete _impl_.t3_;
  }
  _impl_.t3_ = nullptr;
}
inline const ::Thrusters_Pos& Thrusters::_internal_t3() const {
  const ::Thrusters_Pos* p = _impl_.t3_;
  return p != nullptr ? *p : reinterpret_cast<const ::Thrusters_Pos&>(
      ::_Thrusters_Pos_default_instance_);
}
inline const ::Thrusters_Pos& Thrusters::t3() const {
  // @@protoc_insertion_point(field_get:Thrusters.T3)
  return _internal_t3();
}
inline void Thrusters::unsafe_arena_set_allocated_t3(
    ::Thrusters_Pos* t3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t3_);
  }
  _impl_.t3_ = t3;
  if (t3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Thrusters.T3)
}
inline ::Thrusters_Pos* Thrusters::release_t3() {
  
  ::Thrusters_Pos* temp = _impl_.t3_;
  _impl_.t3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Thrusters_Pos* Thrusters::unsafe_arena_release_t3() {
  // @@protoc_insertion_point(field_release:Thrusters.T3)
  
  ::Thrusters_Pos* temp = _impl_.t3_;
  _impl_.t3_ = nullptr;
  return temp;
}
inline ::Thrusters_Pos* Thrusters::_internal_mutable_t3() {
  
  if (_impl_.t3_ == nullptr) {
    auto* p = CreateMaybeMessage<::Thrusters_Pos>(GetArenaForAllocation());
    _impl_.t3_ = p;
  }
  return _impl_.t3_;
}
inline ::Thrusters_Pos* Thrusters::mutable_t3() {
  ::Thrusters_Pos* _msg = _internal_mutable_t3();
  // @@protoc_insertion_point(field_mutable:Thrusters.T3)
  return _msg;
}
inline void Thrusters::set_allocated_t3(::Thrusters_Pos* t3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t3_;
  }
  if (t3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t3);
    if (message_arena != submessage_arena) {
      t3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t3, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t3_ = t3;
  // @@protoc_insertion_point(field_set_allocated:Thrusters.T3)
}

// .Thrusters.Pos T4 = 4;
inline bool Thrusters::_internal_has_t4() const {
  return this != internal_default_instance() && _impl_.t4_ != nullptr;
}
inline bool Thrusters::has_t4() const {
  return _internal_has_t4();
}
inline void Thrusters::clear_t4() {
  if (GetArenaForAllocation() == nullptr && _impl_.t4_ != nullptr) {
    delete _impl_.t4_;
  }
  _impl_.t4_ = nullptr;
}
inline const ::Thrusters_Pos& Thrusters::_internal_t4() const {
  const ::Thrusters_Pos* p = _impl_.t4_;
  return p != nullptr ? *p : reinterpret_cast<const ::Thrusters_Pos&>(
      ::_Thrusters_Pos_default_instance_);
}
inline const ::Thrusters_Pos& Thrusters::t4() const {
  // @@protoc_insertion_point(field_get:Thrusters.T4)
  return _internal_t4();
}
inline void Thrusters::unsafe_arena_set_allocated_t4(
    ::Thrusters_Pos* t4) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t4_);
  }
  _impl_.t4_ = t4;
  if (t4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Thrusters.T4)
}
inline ::Thrusters_Pos* Thrusters::release_t4() {
  
  ::Thrusters_Pos* temp = _impl_.t4_;
  _impl_.t4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Thrusters_Pos* Thrusters::unsafe_arena_release_t4() {
  // @@protoc_insertion_point(field_release:Thrusters.T4)
  
  ::Thrusters_Pos* temp = _impl_.t4_;
  _impl_.t4_ = nullptr;
  return temp;
}
inline ::Thrusters_Pos* Thrusters::_internal_mutable_t4() {
  
  if (_impl_.t4_ == nullptr) {
    auto* p = CreateMaybeMessage<::Thrusters_Pos>(GetArenaForAllocation());
    _impl_.t4_ = p;
  }
  return _impl_.t4_;
}
inline ::Thrusters_Pos* Thrusters::mutable_t4() {
  ::Thrusters_Pos* _msg = _internal_mutable_t4();
  // @@protoc_insertion_point(field_mutable:Thrusters.T4)
  return _msg;
}
inline void Thrusters::set_allocated_t4(::Thrusters_Pos* t4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t4_;
  }
  if (t4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t4);
    if (message_arena != submessage_arena) {
      t4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t4, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t4_ = t4;
  // @@protoc_insertion_point(field_set_allocated:Thrusters.T4)
}

// .Thrusters.Pos T5 = 5;
inline bool Thrusters::_internal_has_t5() const {
  return this != internal_default_instance() && _impl_.t5_ != nullptr;
}
inline bool Thrusters::has_t5() const {
  return _internal_has_t5();
}
inline void Thrusters::clear_t5() {
  if (GetArenaForAllocation() == nullptr && _impl_.t5_ != nullptr) {
    delete _impl_.t5_;
  }
  _impl_.t5_ = nullptr;
}
inline const ::Thrusters_Pos& Thrusters::_internal_t5() const {
  const ::Thrusters_Pos* p = _impl_.t5_;
  return p != nullptr ? *p : reinterpret_cast<const ::Thrusters_Pos&>(
      ::_Thrusters_Pos_default_instance_);
}
inline const ::Thrusters_Pos& Thrusters::t5() const {
  // @@protoc_insertion_point(field_get:Thrusters.T5)
  return _internal_t5();
}
inline void Thrusters::unsafe_arena_set_allocated_t5(
    ::Thrusters_Pos* t5) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t5_);
  }
  _impl_.t5_ = t5;
  if (t5) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Thrusters.T5)
}
inline ::Thrusters_Pos* Thrusters::release_t5() {
  
  ::Thrusters_Pos* temp = _impl_.t5_;
  _impl_.t5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Thrusters_Pos* Thrusters::unsafe_arena_release_t5() {
  // @@protoc_insertion_point(field_release:Thrusters.T5)
  
  ::Thrusters_Pos* temp = _impl_.t5_;
  _impl_.t5_ = nullptr;
  return temp;
}
inline ::Thrusters_Pos* Thrusters::_internal_mutable_t5() {
  
  if (_impl_.t5_ == nullptr) {
    auto* p = CreateMaybeMessage<::Thrusters_Pos>(GetArenaForAllocation());
    _impl_.t5_ = p;
  }
  return _impl_.t5_;
}
inline ::Thrusters_Pos* Thrusters::mutable_t5() {
  ::Thrusters_Pos* _msg = _internal_mutable_t5();
  // @@protoc_insertion_point(field_mutable:Thrusters.T5)
  return _msg;
}
inline void Thrusters::set_allocated_t5(::Thrusters_Pos* t5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t5_;
  }
  if (t5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t5);
    if (message_arena != submessage_arena) {
      t5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t5, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t5_ = t5;
  // @@protoc_insertion_point(field_set_allocated:Thrusters.T5)
}

// .Thrusters.Pos T6 = 6;
inline bool Thrusters::_internal_has_t6() const {
  return this != internal_default_instance() && _impl_.t6_ != nullptr;
}
inline bool Thrusters::has_t6() const {
  return _internal_has_t6();
}
inline void Thrusters::clear_t6() {
  if (GetArenaForAllocation() == nullptr && _impl_.t6_ != nullptr) {
    delete _impl_.t6_;
  }
  _impl_.t6_ = nullptr;
}
inline const ::Thrusters_Pos& Thrusters::_internal_t6() const {
  const ::Thrusters_Pos* p = _impl_.t6_;
  return p != nullptr ? *p : reinterpret_cast<const ::Thrusters_Pos&>(
      ::_Thrusters_Pos_default_instance_);
}
inline const ::Thrusters_Pos& Thrusters::t6() const {
  // @@protoc_insertion_point(field_get:Thrusters.T6)
  return _internal_t6();
}
inline void Thrusters::unsafe_arena_set_allocated_t6(
    ::Thrusters_Pos* t6) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t6_);
  }
  _impl_.t6_ = t6;
  if (t6) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Thrusters.T6)
}
inline ::Thrusters_Pos* Thrusters::release_t6() {
  
  ::Thrusters_Pos* temp = _impl_.t6_;
  _impl_.t6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Thrusters_Pos* Thrusters::unsafe_arena_release_t6() {
  // @@protoc_insertion_point(field_release:Thrusters.T6)
  
  ::Thrusters_Pos* temp = _impl_.t6_;
  _impl_.t6_ = nullptr;
  return temp;
}
inline ::Thrusters_Pos* Thrusters::_internal_mutable_t6() {
  
  if (_impl_.t6_ == nullptr) {
    auto* p = CreateMaybeMessage<::Thrusters_Pos>(GetArenaForAllocation());
    _impl_.t6_ = p;
  }
  return _impl_.t6_;
}
inline ::Thrusters_Pos* Thrusters::mutable_t6() {
  ::Thrusters_Pos* _msg = _internal_mutable_t6();
  // @@protoc_insertion_point(field_mutable:Thrusters.T6)
  return _msg;
}
inline void Thrusters::set_allocated_t6(::Thrusters_Pos* t6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t6_;
  }
  if (t6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t6);
    if (message_arena != submessage_arena) {
      t6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t6, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t6_ = t6;
  // @@protoc_insertion_point(field_set_allocated:Thrusters.T6)
}

// .Thrusters.Pos T7 = 7;
inline bool Thrusters::_internal_has_t7() const {
  return this != internal_default_instance() && _impl_.t7_ != nullptr;
}
inline bool Thrusters::has_t7() const {
  return _internal_has_t7();
}
inline void Thrusters::clear_t7() {
  if (GetArenaForAllocation() == nullptr && _impl_.t7_ != nullptr) {
    delete _impl_.t7_;
  }
  _impl_.t7_ = nullptr;
}
inline const ::Thrusters_Pos& Thrusters::_internal_t7() const {
  const ::Thrusters_Pos* p = _impl_.t7_;
  return p != nullptr ? *p : reinterpret_cast<const ::Thrusters_Pos&>(
      ::_Thrusters_Pos_default_instance_);
}
inline const ::Thrusters_Pos& Thrusters::t7() const {
  // @@protoc_insertion_point(field_get:Thrusters.T7)
  return _internal_t7();
}
inline void Thrusters::unsafe_arena_set_allocated_t7(
    ::Thrusters_Pos* t7) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t7_);
  }
  _impl_.t7_ = t7;
  if (t7) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Thrusters.T7)
}
inline ::Thrusters_Pos* Thrusters::release_t7() {
  
  ::Thrusters_Pos* temp = _impl_.t7_;
  _impl_.t7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Thrusters_Pos* Thrusters::unsafe_arena_release_t7() {
  // @@protoc_insertion_point(field_release:Thrusters.T7)
  
  ::Thrusters_Pos* temp = _impl_.t7_;
  _impl_.t7_ = nullptr;
  return temp;
}
inline ::Thrusters_Pos* Thrusters::_internal_mutable_t7() {
  
  if (_impl_.t7_ == nullptr) {
    auto* p = CreateMaybeMessage<::Thrusters_Pos>(GetArenaForAllocation());
    _impl_.t7_ = p;
  }
  return _impl_.t7_;
}
inline ::Thrusters_Pos* Thrusters::mutable_t7() {
  ::Thrusters_Pos* _msg = _internal_mutable_t7();
  // @@protoc_insertion_point(field_mutable:Thrusters.T7)
  return _msg;
}
inline void Thrusters::set_allocated_t7(::Thrusters_Pos* t7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t7_;
  }
  if (t7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t7);
    if (message_arena != submessage_arena) {
      t7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t7, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t7_ = t7;
  // @@protoc_insertion_point(field_set_allocated:Thrusters.T7)
}

// .Thrusters.Pos T8 = 8;
inline bool Thrusters::_internal_has_t8() const {
  return this != internal_default_instance() && _impl_.t8_ != nullptr;
}
inline bool Thrusters::has_t8() const {
  return _internal_has_t8();
}
inline void Thrusters::clear_t8() {
  if (GetArenaForAllocation() == nullptr && _impl_.t8_ != nullptr) {
    delete _impl_.t8_;
  }
  _impl_.t8_ = nullptr;
}
inline const ::Thrusters_Pos& Thrusters::_internal_t8() const {
  const ::Thrusters_Pos* p = _impl_.t8_;
  return p != nullptr ? *p : reinterpret_cast<const ::Thrusters_Pos&>(
      ::_Thrusters_Pos_default_instance_);
}
inline const ::Thrusters_Pos& Thrusters::t8() const {
  // @@protoc_insertion_point(field_get:Thrusters.T8)
  return _internal_t8();
}
inline void Thrusters::unsafe_arena_set_allocated_t8(
    ::Thrusters_Pos* t8) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t8_);
  }
  _impl_.t8_ = t8;
  if (t8) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Thrusters.T8)
}
inline ::Thrusters_Pos* Thrusters::release_t8() {
  
  ::Thrusters_Pos* temp = _impl_.t8_;
  _impl_.t8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Thrusters_Pos* Thrusters::unsafe_arena_release_t8() {
  // @@protoc_insertion_point(field_release:Thrusters.T8)
  
  ::Thrusters_Pos* temp = _impl_.t8_;
  _impl_.t8_ = nullptr;
  return temp;
}
inline ::Thrusters_Pos* Thrusters::_internal_mutable_t8() {
  
  if (_impl_.t8_ == nullptr) {
    auto* p = CreateMaybeMessage<::Thrusters_Pos>(GetArenaForAllocation());
    _impl_.t8_ = p;
  }
  return _impl_.t8_;
}
inline ::Thrusters_Pos* Thrusters::mutable_t8() {
  ::Thrusters_Pos* _msg = _internal_mutable_t8();
  // @@protoc_insertion_point(field_mutable:Thrusters.T8)
  return _msg;
}
inline void Thrusters::set_allocated_t8(::Thrusters_Pos* t8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t8_;
  }
  if (t8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t8);
    if (message_arena != submessage_arena) {
      t8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t8, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.t8_ = t8;
  // @@protoc_insertion_point(field_set_allocated:Thrusters.T8)
}

// float MaxPowT1 = 9;
inline void Thrusters::clear_maxpowt1() {
  _impl_.maxpowt1_ = 0;
}
inline float Thrusters::_internal_maxpowt1() const {
  return _impl_.maxpowt1_;
}
inline float Thrusters::maxpowt1() const {
  // @@protoc_insertion_point(field_get:Thrusters.MaxPowT1)
  return _internal_maxpowt1();
}
inline void Thrusters::_internal_set_maxpowt1(float value) {
  
  _impl_.maxpowt1_ = value;
}
inline void Thrusters::set_maxpowt1(float value) {
  _internal_set_maxpowt1(value);
  // @@protoc_insertion_point(field_set:Thrusters.MaxPowT1)
}

// float MaxPowT2 = 10;
inline void Thrusters::clear_maxpowt2() {
  _impl_.maxpowt2_ = 0;
}
inline float Thrusters::_internal_maxpowt2() const {
  return _impl_.maxpowt2_;
}
inline float Thrusters::maxpowt2() const {
  // @@protoc_insertion_point(field_get:Thrusters.MaxPowT2)
  return _internal_maxpowt2();
}
inline void Thrusters::_internal_set_maxpowt2(float value) {
  
  _impl_.maxpowt2_ = value;
}
inline void Thrusters::set_maxpowt2(float value) {
  _internal_set_maxpowt2(value);
  // @@protoc_insertion_point(field_set:Thrusters.MaxPowT2)
}

// float MaxPowT3 = 11;
inline void Thrusters::clear_maxpowt3() {
  _impl_.maxpowt3_ = 0;
}
inline float Thrusters::_internal_maxpowt3() const {
  return _impl_.maxpowt3_;
}
inline float Thrusters::maxpowt3() const {
  // @@protoc_insertion_point(field_get:Thrusters.MaxPowT3)
  return _internal_maxpowt3();
}
inline void Thrusters::_internal_set_maxpowt3(float value) {
  
  _impl_.maxpowt3_ = value;
}
inline void Thrusters::set_maxpowt3(float value) {
  _internal_set_maxpowt3(value);
  // @@protoc_insertion_point(field_set:Thrusters.MaxPowT3)
}

// float MaxPowT4 = 12;
inline void Thrusters::clear_maxpowt4() {
  _impl_.maxpowt4_ = 0;
}
inline float Thrusters::_internal_maxpowt4() const {
  return _impl_.maxpowt4_;
}
inline float Thrusters::maxpowt4() const {
  // @@protoc_insertion_point(field_get:Thrusters.MaxPowT4)
  return _internal_maxpowt4();
}
inline void Thrusters::_internal_set_maxpowt4(float value) {
  
  _impl_.maxpowt4_ = value;
}
inline void Thrusters::set_maxpowt4(float value) {
  _internal_set_maxpowt4(value);
  // @@protoc_insertion_point(field_set:Thrusters.MaxPowT4)
}

// float MaxPowT5 = 13;
inline void Thrusters::clear_maxpowt5() {
  _impl_.maxpowt5_ = 0;
}
inline float Thrusters::_internal_maxpowt5() const {
  return _impl_.maxpowt5_;
}
inline float Thrusters::maxpowt5() const {
  // @@protoc_insertion_point(field_get:Thrusters.MaxPowT5)
  return _internal_maxpowt5();
}
inline void Thrusters::_internal_set_maxpowt5(float value) {
  
  _impl_.maxpowt5_ = value;
}
inline void Thrusters::set_maxpowt5(float value) {
  _internal_set_maxpowt5(value);
  // @@protoc_insertion_point(field_set:Thrusters.MaxPowT5)
}

// float MaxPowT6 = 14;
inline void Thrusters::clear_maxpowt6() {
  _impl_.maxpowt6_ = 0;
}
inline float Thrusters::_internal_maxpowt6() const {
  return _impl_.maxpowt6_;
}
inline float Thrusters::maxpowt6() const {
  // @@protoc_insertion_point(field_get:Thrusters.MaxPowT6)
  return _internal_maxpowt6();
}
inline void Thrusters::_internal_set_maxpowt6(float value) {
  
  _impl_.maxpowt6_ = value;
}
inline void Thrusters::set_maxpowt6(float value) {
  _internal_set_maxpowt6(value);
  // @@protoc_insertion_point(field_set:Thrusters.MaxPowT6)
}

// float MaxPowT7 = 15;
inline void Thrusters::clear_maxpowt7() {
  _impl_.maxpowt7_ = 0;
}
inline float Thrusters::_internal_maxpowt7() const {
  return _impl_.maxpowt7_;
}
inline float Thrusters::maxpowt7() const {
  // @@protoc_insertion_point(field_get:Thrusters.MaxPowT7)
  return _internal_maxpowt7();
}
inline void Thrusters::_internal_set_maxpowt7(float value) {
  
  _impl_.maxpowt7_ = value;
}
inline void Thrusters::set_maxpowt7(float value) {
  _internal_set_maxpowt7(value);
  // @@protoc_insertion_point(field_set:Thrusters.MaxPowT7)
}

// float MaxPowT8 = 16;
inline void Thrusters::clear_maxpowt8() {
  _impl_.maxpowt8_ = 0;
}
inline float Thrusters::_internal_maxpowt8() const {
  return _impl_.maxpowt8_;
}
inline float Thrusters::maxpowt8() const {
  // @@protoc_insertion_point(field_get:Thrusters.MaxPowT8)
  return _internal_maxpowt8();
}
inline void Thrusters::_internal_set_maxpowt8(float value) {
  
  _impl_.maxpowt8_ = value;
}
inline void Thrusters::set_maxpowt8(float value) {
  _internal_set_maxpowt8(value);
  // @@protoc_insertion_point(field_set:Thrusters.MaxPowT8)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_moto_5fproto_2eproto
